<?xml version="1.0" encoding="UTF-8"?><testsuites failures="68" name="dependency-check" tests="10"><testsuite failures="0" errors="0" time="0" id="0" name="C:\Users\Eric\.m2\repository\org\bouncycastle\bcprov-jdk15on\1.70\bcprov-jdk15on-1.70.jar" package="bcprov-jdk15on-1.70.jar" skipped="0" tests="1" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="dependency-check" name="bcprov-jdk15on-1.70.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="1" name="C:\Users\Eric\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.10.2\jackson-core-2.10.2.jar" package="jackson-core-2.10.2.jar" skipped="0" tests="1" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="dependency-check" name="jackson-core-2.10.2.jar"/></testsuite><testsuite failures="4" errors="0" time="0" id="2" name="C:\Users\Eric\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar" package="jackson-databind-2.10.2.jar" skipped="0" tests="4" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="CVE-2020-25649" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.10.2"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N)"/><system-out>A flaw was found in FasterXML Jackson Databind, where it did not have entity expansion secured properly. This flaw allows vulnerability to XML external entity (XXE) attacks. The highest threat from this vulnerability is data integrity.</system-out><system-err>location: C:\Users\Eric\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-36518" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.10.2"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>jackson-databind before 2.13.0 allows a Java StackOverflow exception and denial of service via a large depth of nested objects.</system-out><system-err>location: C:\Users\Eric\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-42003" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.10.2"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In FasterXML jackson-databind before 2.14.0-rc1, resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled.</system-out><system-err>location: C:\Users\Eric\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-42004" name="pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.10.2"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In FasterXML jackson-databind before 2.13.4, resource exhaustion can occur because of a lack of a check in BeanDeserializer._deserializeFromArray to prevent use of deeply nested arrays. An application is vulnerable only with certain customized choices for deserialization.</system-out><system-err>location: C:\Users\Eric\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.10.2\jackson-databind-2.10.2.jar, project-references: [ rest-service:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="3" name="C:\Users\Eric\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jdk8\2.10.2\jackson-datatype-jdk8-2.10.2.jar" package="jackson-datatype-jdk8-2.10.2.jar" skipped="0" tests="1" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="dependency-check" name="jackson-datatype-jdk8-2.10.2.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="4" name="C:\Users\Eric\.m2\repository\jakarta\annotation\jakarta.annotation-api\1.3.5\jakarta.annotation-api-1.3.5.jar" package="jakarta.annotation-api-1.3.5.jar" skipped="0" tests="1" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="dependency-check" name="jakarta.annotation-api-1.3.5.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="5" name="C:\Users\Eric\.m2\repository\org\slf4j\jul-to-slf4j\1.7.30\jul-to-slf4j-1.7.30.jar" package="jul-to-slf4j-1.7.30.jar" skipped="0" tests="1" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="dependency-check" name="jul-to-slf4j-1.7.30.jar"/></testsuite><testsuite failures="0" errors="0" time="0" id="6" name="C:\Users\Eric\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar" package="log4j-api-2.12.1.jar" skipped="5" tests="5" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="CVE-2021-44832" name="pkg:maven/org.apache.logging.log4j/log4j-api@2.12.1"><skipped message="file name: log4j-api-2.12.1.jar" /><system-out>Apache Log4j2 versions 2.0-beta7 through 2.17.0 (excluding security fix releases 2.3.2 and 2.12.4) are vulnerable to a remote code execution (RCE) attack when a configuration uses a JDBC Appender with a JNDI LDAP data source URI when an attacker has control of the target LDAP server. This issue is fixed by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar</system-err></testcase><testcase classname="CVE-2021-44228" name="pkg:maven/org.apache.logging.log4j/log4j-api@2.12.1"><skipped message="file name: log4j-api-2.12.1.jar" /><system-out>Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar</system-err></testcase><testcase classname="CVE-2021-45105" name="pkg:maven/org.apache.logging.log4j/log4j-api@2.12.1"><skipped message="file name: log4j-api-2.12.1.jar" /><system-out>Apache Log4j2 versions 2.0-alpha1 through 2.16.0 (excluding 2.12.3 and 2.3.1) did not protect from uncontrolled recursion from self-referential lookups. This allows an attacker with control over Thread Context Map data to cause a denial of service when a crafted string is interpreted. This issue was fixed in Log4j 2.17.0, 2.12.3, and 2.3.1.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar</system-err></testcase><testcase classname="CVE-2021-45046" name="pkg:maven/org.apache.logging.log4j/log4j-api@2.12.1"><skipped message="file name: log4j-api-2.12.1.jar" /><system-out>It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar</system-err></testcase><testcase classname="CVE-2020-9488" name="pkg:maven/org.apache.logging.log4j/log4j-api@2.12.1"><skipped message="file name: log4j-api-2.12.1.jar" /><system-out>Improper validation of certificate with host mismatch in Apache Log4j SMTP appender. This could allow an SMTPS connection to be intercepted by a man-in-the-middle attack which could leak any log messages sent through that appender. Fixed in Apache Log4j 2.12.3 and 2.13.1</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\logging\log4j\log4j-api\2.12.1\log4j-api-2.12.1.jar</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="7" name="C:\Users\Eric\.m2\repository\org\apache\logging\log4j\log4j-to-slf4j\2.12.1\log4j-to-slf4j-2.12.1.jar" package="log4j-to-slf4j-2.12.1.jar" skipped="0" tests="1" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="dependency-check" name="log4j-to-slf4j-2.12.1.jar"/></testsuite><testsuite failures="1" errors="0" time="0" id="8" name="C:\Users\Eric\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar" package="logback-core-1.2.3.jar" skipped="0" tests="1" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="CVE-2021-42550" name="pkg:maven/ch.qos.logback/logback-core@1.2.3"><failure message="cvssV3: MEDIUM, score: 6.6 (CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In logback version 1.2.7 and prior versions, an attacker with the required privileges to edit configurations files could craft a malicious configuration allowing to execute arbitrary code loaded from LDAP servers.</system-out><system-err>location: C:\Users\Eric\.m2\repository\ch\qos\logback\logback-core\1.2.3\logback-core-1.2.3.jar, project-references: [ rest-service:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="9" name="C:\Users\Eric\.m2\repository\org\slf4j\slf4j-api\1.7.30\slf4j-api-1.7.30.jar" package="slf4j-api-1.7.30.jar" skipped="0" tests="1" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="dependency-check" name="slf4j-api-1.7.30.jar"/></testsuite><testsuite failures="6" errors="0" time="0" id="10" name="C:\Users\Eric\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar" package="snakeyaml-1.25.jar" skipped="0" tests="6" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="CVE-2017-18640" name="pkg:maven/org.yaml/snakeyaml@1.25"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The Alias feature in SnakeYAML before 1.26 allows entity expansion during a load operation, a related issue to CVE-2003-1564.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar, project-references: [ rest-service:runtime ]</system-err></testcase><testcase classname="CVE-2022-25857" name="pkg:maven/org.yaml/snakeyaml@1.25"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar, project-references: [ rest-service:runtime ]</system-err></testcase><testcase classname="CVE-2022-38749" name="pkg:maven/org.yaml/snakeyaml@1.25"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar, project-references: [ rest-service:runtime ]</system-err></testcase><testcase classname="CVE-2022-38751" name="pkg:maven/org.yaml/snakeyaml@1.25"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar, project-references: [ rest-service:runtime ]</system-err></testcase><testcase classname="CVE-2022-38752" name="pkg:maven/org.yaml/snakeyaml@1.25"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar, project-references: [ rest-service:runtime ]</system-err></testcase><testcase classname="CVE-2022-38750" name="pkg:maven/org.yaml/snakeyaml@1.25"><failure message="cvssV3: MEDIUM, score: 5.5 (CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H)"/><system-out>Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\yaml\snakeyaml\1.25\snakeyaml-1.25.jar, project-references: [ rest-service:runtime ]</system-err></testcase></testsuite><testsuite failures="1" errors="0" time="0" id="11" name="C:\Users\Eric\.m2\repository\org\springframework\boot\spring-boot\2.2.4.RELEASE\spring-boot-2.2.4.RELEASE.jar" package="spring-boot-2.2.4.RELEASE.jar" skipped="0" tests="1" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="CVE-2022-27772" name="pkg:maven/org.springframework.boot/spring-boot@2.2.4.RELEASE"><failure message="cvssV3: HIGH, score: 7.8 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>** UNSUPPORTED WHEN ASSIGNED ** spring-boot versions prior to version v2.2.11.RELEASE was vulnerable to temporary directory hijacking. This vulnerability impacted the org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir method. NOTE: This vulnerability only affects products and/or versions that are no longer supported by the maintainer.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\boot\spring-boot\2.2.4.RELEASE\spring-boot-2.2.4.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="12" name="C:\Users\Eric\.m2\repository\org\springframework\boot\spring-boot-starter-web\2.7.4\spring-boot-starter-web-2.7.4.jar" package="spring-boot-starter-web-2.7.4.jar" skipped="0" tests="1" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="dependency-check" name="spring-boot-starter-web-2.7.4.jar"/></testsuite><testsuite failures="9" errors="0" time="0" id="13" name="C:\Users\Eric\.m2\repository\org\springframework\spring-core\5.2.3.RELEASE\spring-core-5.2.3.RELEASE.jar" package="spring-core-5.2.3.RELEASE.jar" skipped="0" tests="9" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="CVE-2022-22965" name="pkg:maven/org.springframework/spring-core@5.2.3.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-core\5.2.3.RELEASE\spring-core-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-22118" name="pkg:maven/org.springframework/spring-core@5.2.3.RELEASE"><failure message="cvssV3: HIGH, score: 7.8 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In Spring Framework, versions 5.2.x prior to 5.2.15 and versions 5.3.x prior to 5.3.7, a WebFlux application is vulnerable to a privilege escalation: by (re)creating the temporary storage directory, a locally authenticated malicious user can read or modify files that have been uploaded to the WebFlux application, or overwrite arbitrary files with multipart request data.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-core\5.2.3.RELEASE\spring-core-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-5421" name="pkg:maven/org.springframework/spring-core@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:H/A:N)"/><system-out>In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-core\5.2.3.RELEASE\spring-core-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-22950" name="pkg:maven/org.springframework/spring-core@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>n Spring Framework versions 5.3.0 - 5.3.16 and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial of service condition.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-core\5.2.3.RELEASE\spring-core-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-22971" name="pkg:maven/org.springframework/spring-core@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, application with a STOMP over WebSocket endpoint is vulnerable to a denial of service attack by an authenticated user.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-core\5.2.3.RELEASE\spring-core-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-22968" name="pkg:maven/org.springframework/spring-core@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>In Spring Framework versions 5.3.0 - 5.3.18, 5.2.0 - 5.2.20, and older unsupported versions, the patterns for disallowedFields on a DataBinder are case sensitive which means a field is not effectively protected unless it is listed with both upper and lower case for the first character of the field, including upper and lower case for the first character of all nested fields within the property path.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-core\5.2.3.RELEASE\spring-core-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-22970" name="pkg:maven/org.springframework/spring-core@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, applications that handle file uploads are vulnerable to DoS attack if they rely on data binding to set a MultipartFile or javax.servlet.Part to a field in a model object.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-core\5.2.3.RELEASE\spring-core-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-22060" name="pkg:maven/org.springframework/spring-core@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 4.3 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N)"/><system-out>In Spring Framework versions 5.3.0 - 5.3.13, 5.2.0 - 5.2.18, and older unsupported versions, it is possible for a user to provide malicious input to cause the insertion of additional log entries. This is a follow-up to CVE-2021-22096 that protects against additional types of input and in more places of the Spring Framework codebase.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-core\5.2.3.RELEASE\spring-core-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-22096" name="pkg:maven/org.springframework/spring-core@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 4.3 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N)"/><system-out>In Spring Framework versions 5.3.0 - 5.3.10, 5.2.0 - 5.2.17, and older unsupported versions, it is possible for a user to provide malicious input to cause the insertion of additional log entries.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-core\5.2.3.RELEASE\spring-core-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase></testsuite><testsuite failures="10" errors="0" time="0" id="14" name="C:\Users\Eric\.m2\repository\org\springframework\spring-web\5.2.3.RELEASE\spring-web-5.2.3.RELEASE.jar" package="spring-web-5.2.3.RELEASE.jar" skipped="0" tests="10" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="CVE-2016-1000027" name="pkg:maven/org.springframework/spring-web@5.2.3.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used for Java deserialization of untrusted data. Depending on how the library is implemented within a product, this issue may or not occur, and authentication may be required. NOTE: the vendor&apos;s position is that untrusted data is not an intended use case. The product&apos;s behavior will not be changed because some users rely on deserialization of trusted data.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-web\5.2.3.RELEASE\spring-web-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-22965" name="pkg:maven/org.springframework/spring-web@5.2.3.RELEASE"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-web\5.2.3.RELEASE\spring-web-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-22118" name="pkg:maven/org.springframework/spring-web@5.2.3.RELEASE"><failure message="cvssV3: HIGH, score: 7.8 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>In Spring Framework, versions 5.2.x prior to 5.2.15 and versions 5.3.x prior to 5.3.7, a WebFlux application is vulnerable to a privilege escalation: by (re)creating the temporary storage directory, a locally authenticated malicious user can read or modify files that have been uploaded to the WebFlux application, or overwrite arbitrary files with multipart request data.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-web\5.2.3.RELEASE\spring-web-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-5421" name="pkg:maven/org.springframework/spring-web@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:H/A:N)"/><system-out>In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-web\5.2.3.RELEASE\spring-web-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-22950" name="pkg:maven/org.springframework/spring-web@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>n Spring Framework versions 5.3.0 - 5.3.16 and older unsupported versions, it is possible for a user to provide a specially crafted SpEL expression that may cause a denial of service condition.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-web\5.2.3.RELEASE\spring-web-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-22971" name="pkg:maven/org.springframework/spring-web@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, application with a STOMP over WebSocket endpoint is vulnerable to a denial of service attack by an authenticated user.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-web\5.2.3.RELEASE\spring-web-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-22968" name="pkg:maven/org.springframework/spring-web@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>In Spring Framework versions 5.3.0 - 5.3.18, 5.2.0 - 5.2.20, and older unsupported versions, the patterns for disallowedFields on a DataBinder are case sensitive which means a field is not effectively protected unless it is listed with both upper and lower case for the first character of the field, including upper and lower case for the first character of all nested fields within the property path.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-web\5.2.3.RELEASE\spring-web-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-22970" name="pkg:maven/org.springframework/spring-web@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H)"/><system-out>In spring framework versions prior to 5.3.20+ , 5.2.22+ and old unsupported versions, applications that handle file uploads are vulnerable to DoS attack if they rely on data binding to set a MultipartFile or javax.servlet.Part to a field in a model object.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-web\5.2.3.RELEASE\spring-web-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-22060" name="pkg:maven/org.springframework/spring-web@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 4.3 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N)"/><system-out>In Spring Framework versions 5.3.0 - 5.3.13, 5.2.0 - 5.2.18, and older unsupported versions, it is possible for a user to provide malicious input to cause the insertion of additional log entries. This is a follow-up to CVE-2021-22096 that protects against additional types of input and in more places of the Spring Framework codebase.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-web\5.2.3.RELEASE\spring-web-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-22096" name="pkg:maven/org.springframework/spring-web@5.2.3.RELEASE"><failure message="cvssV3: MEDIUM, score: 4.3 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N)"/><system-out>In Spring Framework versions 5.3.0 - 5.3.10, 5.2.0 - 5.2.17, and older unsupported versions, it is possible for a user to provide malicious input to cause the insertion of additional log entries.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\springframework\spring-web\5.2.3.RELEASE\spring-web-5.2.3.RELEASE.jar, project-references: [ rest-service:compile ]</system-err></testcase></testsuite><testsuite failures="18" errors="0" time="0" id="15" name="C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar" package="tomcat-embed-core-9.0.30.jar" skipped="0" tests="18" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="CVE-2020-1938" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>When using the Apache JServ Protocol (AJP), care must be taken when trusting incoming connections to Apache Tomcat. Tomcat treats AJP connections as having higher trust than, for example, a similar HTTP connection. If such connections are available to an attacker, they can be exploited in ways that may be surprising. In Apache Tomcat 9.0.0.M1 to 9.0.0.30, 8.5.0 to 8.5.50 and 7.0.0 to 7.0.99, Tomcat shipped with an AJP Connector enabled by default that listened on all configured IP addresses. It was expected (and recommended in the security guide) that this Connector would be disabled if not required. This vulnerability report identified a mechanism that allowed: - returning arbitrary files from anywhere in the web application - processing any file in the web application as a JSP Further, if the web application allowed file upload and stored those files within the web application (or the attacker was able to control the content of the web application by some other means) then this, along with the ability to process a file as a JSP, made remote code execution possible. It is important to note that mitigation is only required if an AJP port is accessible to untrusted users. Users wishing to take a defence-in-depth approach and block the vector that permits returning arbitrary files and execution as JSP may upgrade to Apache Tomcat 9.0.31, 8.5.51 or 7.0.100 or later. A number of changes were made to the default AJP Connector configuration in 9.0.31 to harden the default configuration. It is likely that users upgrading to 9.0.31, 8.5.51 or 7.0.100 or later will need to make small changes to their configurations.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-11996" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>A specially crafted sequence of HTTP/2 requests sent to Apache Tomcat 10.0.0-M1 to 10.0.0-M5, 9.0.0.M1 to 9.0.35 and 8.5.0 to 8.5.55 could trigger high CPU usage for several seconds. If a sufficient number of such requests were made on concurrent HTTP/2 connections, the server could become unresponsive.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-13934" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>An h2c direct connection to Apache Tomcat 10.0.0-M1 to 10.0.0-M6, 9.0.0.M5 to 9.0.36 and 8.5.1 to 8.5.56 did not release the HTTP/1.1 processor after the upgrade to HTTP/2. If a sufficient number of such requests were made, an OutOfMemoryException could occur leading to a denial of service.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-13935" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The payload length in a WebSocket frame was not correctly validated in Apache Tomcat 10.0.0-M1 to 10.0.0-M6, 9.0.0.M1 to 9.0.36, 8.5.0 to 8.5.56 and 7.0.27 to 7.0.104. Invalid payload lengths could trigger an infinite loop. Multiple requests with invalid payload lengths could lead to a denial of service.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-17527" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>While investigating bug 64830 it was discovered that Apache Tomcat 10.0.0-M1 to 10.0.0-M9, 9.0.0-M1 to 9.0.39 and 8.5.0 to 8.5.59 could re-use an HTTP request header value from the previous stream received on an HTTP/2 connection for the request associated with the subsequent stream. While this would most likely lead to an error and the closure of the HTTP/2 connection, it is possible that information could leak between requests.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-25122" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>When responding to new h2c connection requests, Apache Tomcat versions 10.0.0-M1 to 10.0.0, 9.0.0.M1 to 9.0.41 and 8.5.0 to 8.5.61 could duplicate request headers and a limited amount of request body from one request to another meaning user A and user B could both see the results of user A&apos;s request.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-41079" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Apache Tomcat 8.5.0 to 8.5.63, 9.0.0-M1 to 9.0.43 and 10.0.0-M1 to 10.0.2 did not properly validate incoming TLS packets. When Tomcat was configured to use NIO+OpenSSL or NIO2+OpenSSL for TLS, a specially crafted packet could be used to trigger an infinite loop resulting in a denial of service.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-29885" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The documentation of Apache Tomcat 10.1.0-M1 to 10.1.0-M14, 10.0.0-M1 to 10.0.20, 9.0.13 to 9.0.62 and 8.5.38 to 8.5.78 for the EncryptInterceptor incorrectly stated it enabled Tomcat clustering to run over an untrusted network. This was not correct. While the EncryptInterceptor does provide confidentiality and integrity protection, it does not protect against all risks associated with running over any untrusted network, particularly DoS risks.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-9484" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: HIGH, score: 7.0 (CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>When using Apache Tomcat versions 10.0.0-M1 to 10.0.0-M4, 9.0.0.M1 to 9.0.34, 8.5.0 to 8.5.54 and 7.0.0 to 7.0.103 if a) an attacker is able to control the contents and name of a file on the server; and b) the server is configured to use the PersistenceManager with a FileStore; and c) the PersistenceManager is configured with sessionAttributeValueClassNameFilter=&quot;null&quot; (the default unless a SecurityManager is used) or a sufficiently lax filter to allow the attacker provided object to be deserialized; and d) the attacker knows the relative file path from the storage location used by FileStore to the file the attacker has control over; then, using a specifically crafted request, the attacker will be able to trigger remote code execution via deserialization of the file under their control. Note that all of conditions a) to d) must be true for the attack to succeed.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-25329" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: HIGH, score: 7.0 (CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>The fix for CVE-2020-9484 was incomplete. When using Apache Tomcat 10.0.0-M1 to 10.0.0, 9.0.0.M1 to 9.0.41, 8.5.0 to 8.5.61 or 7.0.0. to 7.0.107 with a configuration edge case that was highly unlikely to be used, the Tomcat instance was still vulnerable to CVE-2020-9494. Note that both the previously published prerequisites for CVE-2020-9484 and the previously published mitigations for CVE-2020-9484 also apply to this issue.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-30640" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:N)"/><system-out>A vulnerability in the JNDI Realm of Apache Tomcat allows an attacker to authenticate using variations of a valid user name and/or to bypass some of the protection provided by the LockOut Realm. This issue affects Apache Tomcat 10.0.0-M1 to 10.0.5; 9.0.0.M1 to 9.0.45; 8.5.0 to 8.5.65.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-34305" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: MEDIUM, score: 6.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N)"/><system-out>In Apache Tomcat 10.1.0-M1 to 10.1.0-M16, 10.0.0-M1 to 10.0.22, 9.0.30 to 9.0.64 and 8.5.50 to 8.5.81 the Form authentication example in the examples web application displayed user provided data without filtering, exposing a XSS vulnerability.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-24122" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>When serving resources from a network location using the NTFS file system, Apache Tomcat versions 10.0.0-M1 to 10.0.0-M9, 9.0.0.M1 to 9.0.39, 8.5.0 to 8.5.59 and 7.0.0 to 7.0.106 were susceptible to JSP source code disclosure in some configurations. The root cause was the unexpected behaviour of the JRE API File.getCanonicalPath() which in turn was caused by the inconsistent behaviour of the Windows API (FindFirstFileW) in some circumstances.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-33037" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>Apache Tomcat 10.0.0-M1 to 10.0.6, 9.0.0.M1 to 9.0.46 and 8.5.0 to 8.5.66 did not correctly parse the HTTP transfer-encoding request header in some circumstances leading to the possibility to request smuggling when used with a reverse proxy. Specifically: - Tomcat incorrectly ignored the transfer encoding header if the client declared it would only accept an HTTP/1.0 response; - Tomcat honoured the identify encoding; and - Tomcat did not ensure that, if present, the chunked encoding was the final encoding.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2019-17569" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: MEDIUM, score: 4.8 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N)"/><system-out>The refactoring present in Apache Tomcat 9.0.28 to 9.0.30, 8.5.48 to 8.5.50 and 7.0.98 to 7.0.99 introduced a regression. The result of the regression was that invalid Transfer-Encoding headers were incorrectly processed leading to a possibility of HTTP Request Smuggling if Tomcat was located behind a reverse proxy that incorrectly handled the invalid Transfer-Encoding header in a particular manner. Such a reverse proxy is considered unlikely.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-1935" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: MEDIUM, score: 4.8 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N)"/><system-out>In Apache Tomcat 9.0.0.M1 to 9.0.30, 8.5.0 to 8.5.50 and 7.0.0 to 7.0.99 the HTTP header parsing code used an approach to end-of-line parsing that allowed some invalid HTTP headers to be parsed as valid. This led to a possibility of HTTP Request Smuggling if Tomcat was located behind a reverse proxy that incorrectly handled the invalid Transfer-Encoding header in a particular manner. Such a reverse proxy is considered unlikely.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-13943" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: MEDIUM, score: 4.3 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N)"/><system-out>If an HTTP/2 client connecting to Apache Tomcat 10.0.0-M1 to 10.0.0-M7, 9.0.0.M1 to 9.0.37 or 8.5.0 to 8.5.57 exceeded the agreed maximum number of concurrent streams for a connection (in violation of the HTTP/2 protocol), it was possible that a subsequent request made on that connection could contain HTTP headers - including HTTP/2 pseudo headers - from a previous request rather than the intended headers. This could lead to users seeing responses for unexpected resources.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-43980" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-core@9.0.30"><failure message="cvssV3: LOW, score: 3.7 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>The simplified implementation of blocking reads and writes introduced in Tomcat 10 and back-ported to Tomcat 9.0.47 onwards exposed a long standing (but extremely hard to trigger) concurrency bug in Apache Tomcat 10.1.0 to 10.1.0-M12, 10.0.0-M1 to 10.0.18, 9.0.0-M1 to 9.0.60 and 8.5.0 to 8.5.77 that could cause client connections to share an Http11Processor instance resulting in responses, or part responses, to be received by the wrong client.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-core\9.0.30\tomcat-embed-core-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase></testsuite><testsuite failures="0" errors="0" time="0" id="16" name="C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-el\9.0.30\tomcat-embed-el-9.0.30.jar" package="tomcat-embed-el-9.0.30.jar" skipped="0" tests="1" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="dependency-check" name="tomcat-embed-el-9.0.30.jar"/></testsuite><testsuite failures="19" errors="0" time="0" id="17" name="C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar" package="tomcat-embed-websocket-9.0.30.jar" skipped="0" tests="19" timestamp="2022-10-07T17:11:23.3125573"><testcase classname="CVE-2020-1938" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: CRITICAL, score: 9.8 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H)"/><system-out>When using the Apache JServ Protocol (AJP), care must be taken when trusting incoming connections to Apache Tomcat. Tomcat treats AJP connections as having higher trust than, for example, a similar HTTP connection. If such connections are available to an attacker, they can be exploited in ways that may be surprising. In Apache Tomcat 9.0.0.M1 to 9.0.0.30, 8.5.0 to 8.5.50 and 7.0.0 to 7.0.99, Tomcat shipped with an AJP Connector enabled by default that listened on all configured IP addresses. It was expected (and recommended in the security guide) that this Connector would be disabled if not required. This vulnerability report identified a mechanism that allowed: - returning arbitrary files from anywhere in the web application - processing any file in the web application as a JSP Further, if the web application allowed file upload and stored those files within the web application (or the attacker was able to control the content of the web application by some other means) then this, along with the ability to process a file as a JSP, made remote code execution possible. It is important to note that mitigation is only required if an AJP port is accessible to untrusted users. Users wishing to take a defence-in-depth approach and block the vector that permits returning arbitrary files and execution as JSP may upgrade to Apache Tomcat 9.0.31, 8.5.51 or 7.0.100 or later. A number of changes were made to the default AJP Connector configuration in 9.0.31 to harden the default configuration. It is likely that users upgrading to 9.0.31, 8.5.51 or 7.0.100 or later will need to make small changes to their configurations.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-8022" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: HIGH, score: 7.8 (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>A Incorrect Default Permissions vulnerability in the packaging of tomcat on SUSE Enterprise Storage 5, SUSE Linux Enterprise Server 12-SP2-BCL, SUSE Linux Enterprise Server 12-SP2-LTSS, SUSE Linux Enterprise Server 12-SP3-BCL, SUSE Linux Enterprise Server 12-SP3-LTSS, SUSE Linux Enterprise Server 12-SP4, SUSE Linux Enterprise Server 12-SP5, SUSE Linux Enterprise Server 15-LTSS, SUSE Linux Enterprise Server for SAP 12-SP2, SUSE Linux Enterprise Server for SAP 12-SP3, SUSE Linux Enterprise Server for SAP 15, SUSE OpenStack Cloud 7, SUSE OpenStack Cloud 8, SUSE OpenStack Cloud Crowbar 8 allows local attackers to escalate from group tomcat to root. This issue affects: SUSE Enterprise Storage 5 tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP2-BCL tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP2-LTSS tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP3-BCL tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP3-LTSS tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server 12-SP4 tomcat versions prior to 9.0.35-3.39.1. SUSE Linux Enterprise Server 12-SP5 tomcat versions prior to 9.0.35-3.39.1. SUSE Linux Enterprise Server 15-LTSS tomcat versions prior to 9.0.35-3.57.3. SUSE Linux Enterprise Server for SAP 12-SP2 tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server for SAP 12-SP3 tomcat versions prior to 8.0.53-29.32.1. SUSE Linux Enterprise Server for SAP 15 tomcat versions prior to 9.0.35-3.57.3. SUSE OpenStack Cloud 7 tomcat versions prior to 8.0.53-29.32.1. SUSE OpenStack Cloud 8 tomcat versions prior to 8.0.53-29.32.1. SUSE OpenStack Cloud Crowbar 8 tomcat versions prior to 8.0.53-29.32.1.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-11996" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>A specially crafted sequence of HTTP/2 requests sent to Apache Tomcat 10.0.0-M1 to 10.0.0-M5, 9.0.0.M1 to 9.0.35 and 8.5.0 to 8.5.55 could trigger high CPU usage for several seconds. If a sufficient number of such requests were made on concurrent HTTP/2 connections, the server could become unresponsive.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-13934" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>An h2c direct connection to Apache Tomcat 10.0.0-M1 to 10.0.0-M6, 9.0.0.M5 to 9.0.36 and 8.5.1 to 8.5.56 did not release the HTTP/1.1 processor after the upgrade to HTTP/2. If a sufficient number of such requests were made, an OutOfMemoryException could occur leading to a denial of service.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-13935" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The payload length in a WebSocket frame was not correctly validated in Apache Tomcat 10.0.0-M1 to 10.0.0-M6, 9.0.0.M1 to 9.0.36, 8.5.0 to 8.5.56 and 7.0.27 to 7.0.104. Invalid payload lengths could trigger an infinite loop. Multiple requests with invalid payload lengths could lead to a denial of service.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-17527" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>While investigating bug 64830 it was discovered that Apache Tomcat 10.0.0-M1 to 10.0.0-M9, 9.0.0-M1 to 9.0.39 and 8.5.0 to 8.5.59 could re-use an HTTP request header value from the previous stream received on an HTTP/2 connection for the request associated with the subsequent stream. While this would most likely lead to an error and the closure of the HTTP/2 connection, it is possible that information could leak between requests.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-25122" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>When responding to new h2c connection requests, Apache Tomcat versions 10.0.0-M1 to 10.0.0, 9.0.0.M1 to 9.0.41 and 8.5.0 to 8.5.61 could duplicate request headers and a limited amount of request body from one request to another meaning user A and user B could both see the results of user A&apos;s request.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-41079" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>Apache Tomcat 8.5.0 to 8.5.63, 9.0.0-M1 to 9.0.43 and 10.0.0-M1 to 10.0.2 did not properly validate incoming TLS packets. When Tomcat was configured to use NIO+OpenSSL or NIO2+OpenSSL for TLS, a specially crafted packet could be used to trigger an infinite loop resulting in a denial of service.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-29885" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: HIGH, score: 7.5 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H)"/><system-out>The documentation of Apache Tomcat 10.1.0-M1 to 10.1.0-M14, 10.0.0-M1 to 10.0.20, 9.0.13 to 9.0.62 and 8.5.38 to 8.5.78 for the EncryptInterceptor incorrectly stated it enabled Tomcat clustering to run over an untrusted network. This was not correct. While the EncryptInterceptor does provide confidentiality and integrity protection, it does not protect against all risks associated with running over any untrusted network, particularly DoS risks.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-9484" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: HIGH, score: 7.0 (CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>When using Apache Tomcat versions 10.0.0-M1 to 10.0.0-M4, 9.0.0.M1 to 9.0.34, 8.5.0 to 8.5.54 and 7.0.0 to 7.0.103 if a) an attacker is able to control the contents and name of a file on the server; and b) the server is configured to use the PersistenceManager with a FileStore; and c) the PersistenceManager is configured with sessionAttributeValueClassNameFilter=&quot;null&quot; (the default unless a SecurityManager is used) or a sufficiently lax filter to allow the attacker provided object to be deserialized; and d) the attacker knows the relative file path from the storage location used by FileStore to the file the attacker has control over; then, using a specifically crafted request, the attacker will be able to trigger remote code execution via deserialization of the file under their control. Note that all of conditions a) to d) must be true for the attack to succeed.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-25329" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: HIGH, score: 7.0 (CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H)"/><system-out>The fix for CVE-2020-9484 was incomplete. When using Apache Tomcat 10.0.0-M1 to 10.0.0, 9.0.0.M1 to 9.0.41, 8.5.0 to 8.5.61 or 7.0.0. to 7.0.107 with a configuration edge case that was highly unlikely to be used, the Tomcat instance was still vulnerable to CVE-2020-9494. Note that both the previously published prerequisites for CVE-2020-9484 and the previously published mitigations for CVE-2020-9484 also apply to this issue.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-30640" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: MEDIUM, score: 6.5 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:H/A:N)"/><system-out>A vulnerability in the JNDI Realm of Apache Tomcat allows an attacker to authenticate using variations of a valid user name and/or to bypass some of the protection provided by the LockOut Realm. This issue affects Apache Tomcat 10.0.0-M1 to 10.0.5; 9.0.0.M1 to 9.0.45; 8.5.0 to 8.5.65.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2022-34305" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: MEDIUM, score: 6.1 (CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N)"/><system-out>In Apache Tomcat 10.1.0-M1 to 10.1.0-M16, 10.0.0-M1 to 10.0.22, 9.0.30 to 9.0.64 and 8.5.50 to 8.5.81 the Form authentication example in the examples web application displayed user provided data without filtering, exposing a XSS vulnerability.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-24122" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: MEDIUM, score: 5.9 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N)"/><system-out>When serving resources from a network location using the NTFS file system, Apache Tomcat versions 10.0.0-M1 to 10.0.0-M9, 9.0.0.M1 to 9.0.39, 8.5.0 to 8.5.59 and 7.0.0 to 7.0.106 were susceptible to JSP source code disclosure in some configurations. The root cause was the unexpected behaviour of the JRE API File.getCanonicalPath() which in turn was caused by the inconsistent behaviour of the Windows API (FindFirstFileW) in some circumstances.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-33037" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: MEDIUM, score: 5.3 (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N)"/><system-out>Apache Tomcat 10.0.0-M1 to 10.0.6, 9.0.0.M1 to 9.0.46 and 8.5.0 to 8.5.66 did not correctly parse the HTTP transfer-encoding request header in some circumstances leading to the possibility to request smuggling when used with a reverse proxy. Specifically: - Tomcat incorrectly ignored the transfer encoding header if the client declared it would only accept an HTTP/1.0 response; - Tomcat honoured the identify encoding; and - Tomcat did not ensure that, if present, the chunked encoding was the final encoding.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2019-17569" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: MEDIUM, score: 4.8 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N)"/><system-out>The refactoring present in Apache Tomcat 9.0.28 to 9.0.30, 8.5.48 to 8.5.50 and 7.0.98 to 7.0.99 introduced a regression. The result of the regression was that invalid Transfer-Encoding headers were incorrectly processed leading to a possibility of HTTP Request Smuggling if Tomcat was located behind a reverse proxy that incorrectly handled the invalid Transfer-Encoding header in a particular manner. Such a reverse proxy is considered unlikely.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-1935" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: MEDIUM, score: 4.8 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N)"/><system-out>In Apache Tomcat 9.0.0.M1 to 9.0.30, 8.5.0 to 8.5.50 and 7.0.0 to 7.0.99 the HTTP header parsing code used an approach to end-of-line parsing that allowed some invalid HTTP headers to be parsed as valid. This led to a possibility of HTTP Request Smuggling if Tomcat was located behind a reverse proxy that incorrectly handled the invalid Transfer-Encoding header in a particular manner. Such a reverse proxy is considered unlikely.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2020-13943" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: MEDIUM, score: 4.3 (CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N)"/><system-out>If an HTTP/2 client connecting to Apache Tomcat 10.0.0-M1 to 10.0.0-M7, 9.0.0.M1 to 9.0.37 or 8.5.0 to 8.5.57 exceeded the agreed maximum number of concurrent streams for a connection (in violation of the HTTP/2 protocol), it was possible that a subsequent request made on that connection could contain HTTP headers - including HTTP/2 pseudo headers - from a previous request rather than the intended headers. This could lead to users seeing responses for unexpected resources.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase><testcase classname="CVE-2021-43980" name="pkg:maven/org.apache.tomcat.embed/tomcat-embed-websocket@9.0.30"><failure message="cvssV3: LOW, score: 3.7 (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N)"/><system-out>The simplified implementation of blocking reads and writes introduced in Tomcat 10 and back-ported to Tomcat 9.0.47 onwards exposed a long standing (but extremely hard to trigger) concurrency bug in Apache Tomcat 10.1.0 to 10.1.0-M12, 10.0.0-M1 to 10.0.18, 9.0.0-M1 to 9.0.60 and 8.5.0 to 8.5.77 that could cause client connections to share an Http11Processor instance resulting in responses, or part responses, to be received by the wrong client.</system-out><system-err>location: C:\Users\Eric\.m2\repository\org\apache\tomcat\embed\tomcat-embed-websocket\9.0.30\tomcat-embed-websocket-9.0.30.jar, project-references: [ rest-service:compile ]</system-err></testcase></testsuite></testsuites>